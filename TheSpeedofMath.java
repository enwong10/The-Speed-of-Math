/*--------------------------------------------------------------------------------------*/
/*  TheSpeedofMath.java  -  The program itself is a simple arithmetic game in which     */
/*                     questions are randomly generated by the program and users are    */
/*                     challenged to answer the questions within a certain time frame.  */
/*                     The purpose of the proposed program is to aid students in their  */
/*                     ability to think and react, and improve their mental math skills */
/*                     as well.                                                         */
/*--------------------------------------------------------------------------------------*/
/*  Author: Enoch Wong                                                                  */
/*  Date: May 26, 2016                                                                  */
/*--------------------------------------------------------------------------------------*/
/*  Input:  User inputs the answers to the question that is generated, the form of      */
/*          equations they would like to do, and the time given for each question       */
/*  Output: Different screens are displayed depending on the page; During the game, the */
/*          score, time, and questions are outputted for the user, as well as the score */
/*          of the user when the game is completed                                      */
/*--------------------------------------------------------------------------------------*/
//IMPORT
import java.applet.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Graphics;
import java.applet.AudioClip;

import java.io.*;
import java.util.*;
import java.text.*;
import javax.swing.Timer;

public class TheSpeedofMath extends Applet
    implements ActionListener
{
    //DECLARE VARIABLES
    //declare image
    Image HomeScreen, SettingsScreen, GOScreen, White, Black, LightBlue, LightGray, LightPurple, LightYellow, LightPink, LightGreen, LightBrown, DarkBlue, DarkGray, DarkPurple, DarkYellow, DarkPink, DarkGreen, DarkBrown, TooGood, currentBackground;
    //declare int
    int page, ans, ans1, ans2, score = 0, x = 1000, y = 750, math = 4, one, two, random, userSeconds = 5, seconds = userSeconds, buttNumber, comment, wrong, placeholder;
    //declare fonts
    Font text = new Font ("Impact", Font.PLAIN, 36);
    Font text2 = new Font ("Constantia", Font.PLAIN, 32);
    Font buttonFont = new Font ("Courier New", Font.PLAIN, 20);
    Font radioButtonFont = new Font ("Arial Black", Font.PLAIN, 16);
    Font jokes = new Font ("Bernard MT Condensed", Font.BOLD, 24);
    Font wrongFont = new Font ("Rockwell Extra Bold", Font.PLAIN, 36);
    //declare buttons
    Button start, next, go, butt1, butt2, butt3, home, settings, back;

    //declare radio buttons
    CheckboxGroup maths, sound;
    Checkbox addition, subtract, multiply, divide, all, on, off;
    //declare boolean
    boolean timerStarted = false;
    boolean audioOn = true;
    //declare textfield
    TextField userTime = new TextField ("5", 5);
    //declare audio
    AudioClip audio;

    //declare timer
    Timer time = new Timer (1000, this);
    //create random int generator
    Random randomGenerator = new Random ();

    //declare for double buffering
    private Image dbImage;
    private Graphics dbg;

    //DOUBLE BUFFERING
    public void update (Graphics g)
    {
	dbImage = createImage (this.getSize ().width, this.getSize ().height);
	dbg = dbImage.getGraphics ();

	// initialize buffer
	if (dbImage == null)
	{

	}
	// clear screen in background
	dbg.setColor (getBackground ());
	dbg.fillRect (0, 0, this.getSize ().width, this.getSize ().height);

	//draw elements in background
	dbg.setColor (getForeground ());
	paint (dbg);

	//draw the final image
	g.drawImage (dbImage, 0, 0, this);
    }


    //METHOD TO IMPORT PICTURES AND AUDIO CLIP
    public void importStuff ()
    {
	//import picture
	HomeScreen = getImage (getCodeBase (), "Home Screen.png");
	SettingsScreen = getImage (getCodeBase (), "Settings Screen.png");
	GOScreen = getImage (getCodeBase (), "GO Screen.png");
	White = getImage (getCodeBase (), "White.png");
	Black = getImage (getCodeBase (), "Black.png");
	LightBlue = getImage (getCodeBase (), "Light Blue.png");
	LightGray = getImage (getCodeBase (), "Light Gray.png");
	LightPurple = getImage (getCodeBase (), "Light Purple.png");
	LightYellow = getImage (getCodeBase (), "Light Yellow.png");
	LightPink = getImage (getCodeBase (), "Light Pink.png");
	LightGreen = getImage (getCodeBase (), "Light Green.png");
	LightBrown = getImage (getCodeBase (), "Light Brown.png");
	DarkBlue = getImage (getCodeBase (), "Dark Blue.png");
	DarkGray = getImage (getCodeBase (), "Dark Gray.png");
	DarkPurple = getImage (getCodeBase (), "Dark Purple.png");
	DarkYellow = getImage (getCodeBase (), "Dark Yellow.png");
	DarkPink = getImage (getCodeBase (), "Dark Pink.png");
	DarkGreen = getImage (getCodeBase (), "Dark Green.png");
	DarkBrown = getImage (getCodeBase (), "Dark Brown.png");
	//import audio
	audio = getAudioClip (getDocumentBase (), "Audio.wav");
    }


    //SET BUTTONS AND RADIOBUTTONS
    public void setButtons ()
    {
	//declares button
	start = new Button ("START");
	//adds action listener
	start.addActionListener (this);
	//adds button
	add (start);
	//sets the font of the button
	start.setFont (buttonFont);


	//see previous
	next = new Button ("NEXT");
	next.addActionListener (this);
	add (next);
	next.setFont (buttonFont);

	//see previous
	go = new Button ("GO");
	go.addActionListener (this);
	add (go);
	go.setFont (buttonFont);

	//see previous
	home = new Button ("HOME");
	home.addActionListener (this);
	add (home);
	home.setFont (buttonFont);

	//see previous
	settings = new Button ("SETTINGS");
	settings.addActionListener (this);
	add (settings);
	settings.setFont (buttonFont);

	//see previous
	back = new Button ("SAVE AND EXIT");
	back.addActionListener (this);
	add (back);
	back.setFont (buttonFont);
	back.setVisible (false);

	//see previous
	butt1 = new Button (null);
	butt1.addActionListener (this);
	add (butt1);
	butt1.setFont (buttonFont);

	//see previous
	butt2 = new Button (null);
	butt2.addActionListener (this);
	add (butt2);
	butt2.setFont (buttonFont);

	//see previous
	butt3 = new Button (null);
	butt3.addActionListener (this);
	add (butt3);
	butt3.setFont (buttonFont);

	//declares radio button group
	maths = new CheckboxGroup ();

	//declares radio button
	addition = new Checkbox ("ADDITION", maths, false);
	//adds radio button
	add (addition);
	//set font for radio button
	addition.setFont (radioButtonFont);
	//set background for radio button
	addition.setBackground (Color.black);
	//set colour of text for radio button
	addition.setForeground (Color.white);

	//see previous
	subtract = new Checkbox ("SUBTRACTION", maths, false);
	add (subtract);
	subtract.setFont (radioButtonFont);
	subtract.setBackground (Color.black);
	subtract.setForeground (Color.white);

	//see previous
	multiply = new Checkbox ("MULTIPLICATION", maths, false);
	add (multiply);
	multiply.setFont (radioButtonFont);
	multiply.setBackground (Color.black);
	multiply.setForeground (Color.white);

	//see previous
	divide = new Checkbox ("DIVISION", maths, false);
	add (divide);
	divide.setFont (radioButtonFont);
	divide.setBackground (Color.black);
	divide.setForeground (Color.white);

	//see previous
	all = new Checkbox ("ALL", maths, true);
	add (all);
	all.setFont (radioButtonFont);
	all.setBackground (Color.black);
	all.setForeground (Color.white);

	//declare radio button group
	sound = new CheckboxGroup ();

	//see previous
	on = new Checkbox ("ON", sound, true);
	add (on);
	on.setFont (radioButtonFont);
	on.setBackground (Color.black);
	on.setForeground (Color.white);

	//see previous
	off = new Checkbox ("OFF", sound, false);
	add (off);
	off.setFont (radioButtonFont);
	off.setBackground (Color.black);
	off.setForeground (Color.white);

	//adds text field
	add (userTime);
    }


    //METHOD TO HIDE ALL BUTTONS AFTER EVERY PAGE SWITCH
    public void resetButtons ()
    {
	//resets all the buttons to false
	start.setVisible (false);
	next.setVisible (false);
	go.setVisible (false);
	home.setVisible (false);
	settings.setVisible (false);

	addition.setVisible (false);
	subtract.setVisible (false);
	multiply.setVisible (false);
	divide.setVisible (false);
	all.setVisible (false);
	back.setVisible (false);
	userTime.setVisible (false);
	on.setVisible (false);
	off.setVisible (false);

	//resets buttons only if the timer is off
	if (timerStarted == false)
	{
	    butt1.setVisible (false);
	    butt2.setVisible (false);
	    butt3.setVisible (false);
	}
    }


    //METHOD TO CALCULATE THE BACKGROUND TO DISPLAY
    public Image background ()
    {
	//LOOOOOONG if loop determines the score of the user
	if (0 <= score && score < 10)
	{
	    //returns the image to be displayed as background
	    return White;
	}
	else if (10 <= score && score < 20)
	{
	    return LightBlue;
	}
	else if (20 <= score && score < 30)
	{
	    return LightGreen;
	}
	else if (30 <= score && score < 40)
	{
	    return LightYellow;
	}
	else if (40 <= score && score < 50)
	{
	    return LightPink;
	}
	else if (50 <= score && score < 60)
	{
	    return LightPurple;
	}
	else if (60 <= score && score < 70)
	{
	    return LightGray;
	}
	else if (70 <= score && score < 80)
	{
	    return LightBrown;
	}
	else if (80 <= score && score < 90)
	{
	    return DarkBlue;
	}
	else if (90 <= score && score < 100)
	{
	    return DarkGreen;
	}
	else if (100 <= score && score < 110)
	{
	    return DarkYellow;
	}
	else if (110 <= score && score < 120)
	{
	    return DarkPink;
	}
	else if (120 <= score && score < 130)
	{
	    return DarkPurple;
	}
	else if (130 <= score && score < 140)
	{
	    return DarkGray;
	}
	else if (140 <= score && score < 150)
	{
	    return DarkBrown;
	}
	else
	{
	    //this user is too good...
	    return Black;
	}
    }


    //METHOD TO SET BUTTON LABELS
    public void setButtonLabel ()
    {
	//sets the answer to a different button depending on random generator
	if (buttNumber == 0)
	{
	    butt1.setLabel (" " + ans + " ");
	    butt2.setLabel (String.valueOf (ans1));
	    butt3.setLabel (String.valueOf (ans2));
	}

	else if (buttNumber == 1)
	{
	    butt1.setLabel (String.valueOf (ans1));
	    butt2.setLabel (" " + ans + " ");
	    butt3.setLabel (String.valueOf (ans2));
	}

	else
	{
	    butt1.setLabel (String.valueOf (ans2));
	    butt2.setLabel (String.valueOf (ans1));
	    butt3.setLabel (" " + ans + " ");
	}

    }


    //INITIALIZER METHOD
    public void init ()
    {
	//calls the methods from above
	importStuff ();

	setButtons ();

	resetButtons ();

	//starts audio
	audio.loop ();
    }


    //PAINT METHOD
    public void paint (Graphics g)
    {
	// determines the page to be displayed
	switch (page)
	{
		//HOME SCREEN
	    case 0:
		//set buttons and boundaries so that they are visible
		start.setVisible (true);
		settings.setVisible (true);
		start.setBounds (300, 275, 400, 75);
		settings.setBounds (300, 375, 400, 75);

		//(re)set timer to false
		timerStarted = false;

		//set background
		setBackground (Color.black);
		g.drawImage (HomeScreen, 0, 0, x, y, this);

		//(re)set score to 0
		score = 0;
		break;

		//START PAGE
	    case 1:
		//set background
		g.drawImage (Black, 0, 0, x, y, this);

		//set buttons and boundaries so that they are visible
		next.setVisible (true);
		next.setBounds (300, 375, 400, 75);

		//sets font and colour for text
		g.setFont (text);
		g.setColor (Color.white);
		g.drawString ("THIS GAME CONTAINS SIMPLE MATH", 245, 250);
		g.drawString ("THAT SHOULD ALREADY BE KNOWN...", 250, 300);

		//sets font and colour for jokes
		g.setFont (jokes);
		g.setColor (Color.yellow);
		g.drawString ("How do you solve any equation?", 100, 125);
		g.drawString ("Multiply both sides by 0.", 600, 550);
		break;

		//REVIEW PAGE
	    case 2:
		//set background
		g.drawImage (Black, 0, 0, x, y, this);

		//set button and boundaries so that they are visible
		go.setVisible (true);
		go.setBounds (300, 450, 400, 75);

		//sets appropriate font and colour to display
		g.setFont (text);
		g.setColor (Color.white);
		g.drawString ("BUT IN CASE YOU DON'T...", 325, 200);
		g.drawString ("HERE IS SOME VERY USEFUL INFO :)", 265, 250);
		g.setFont (text2);
		g.drawString ("0 + 0 = 0", 305, 325);
		g.drawString ("0 - 0 = 0", 311, 375);
		g.drawString ("0 x 0 = 0", 563, 325);
		g.drawString ("0 / 0 = ?", 565, 375);

		//sets font and colour for more jokes
		g.setFont (jokes);
		g.setColor (Color.green);
		g.drawString ("What did 8 say to 0?", 650, 100);
		g.drawString ("You're too fat to be me.", 100, 625);
		break;

		//GAME
	    case 3:
		//set background
		setBackground (Color.white);

		//method only runs if timer is off (first second of each question)
		if (timerStarted == false)
		{
		    //sets answer buttons visible
		    butt1.setVisible (true);
		    butt2.setVisible (true);
		    butt3.setVisible (true);

		    //randomize two variable for questions
		    one = randomGenerator.nextInt (10);
		    two = randomGenerator.nextInt (10);

		    if (all.getState () == true)
		    {
			//randomize the type of equation
			random = randomGenerator.nextInt (4);
		    }
		}

		//calls on the method to determine background based on score
		currentBackground = background ();
		//display background
		g.drawImage (currentBackground, 0, 0, x, y, this);

		//sets font for display
		g.setFont (text);

		if (score >= 150)
		{
		    g.setColor (Color.white);
		}

		//switch statement used based on user input for type of equation
		switch (math)
		{
			//only addition
		    case 0:
			g.drawString (one + " + " + two, 310, 150);
			ans = (one + two);
			break;
			//only subtraction
		    case 1:
			//this method ensures that there are no negative numbers
			if (two > one)
			{
			    int placeholder = two;
			    two = one;
			    one = placeholder;
			}
			g.drawString (one + " - " + two, 310, 150);
			ans = (one - two);
			break;
			//only multiplication
		    case 2:
			g.drawString (one + " x " + two, 310, 150);
			ans = (one * two);
			break;
			//only division
		    case 3:
			//this method ensures that numerator and denominator are not 0
			if (one == 0)
			{
			    one = 1;
			}
			if (two == 0)
			{
			    two = 1;
			}

			//reverse of multiplication, so that no decimals are created and complications
			placeholder = (one * two);
			g.drawString (placeholder + " / " + one, 310, 150);
			ans = two;
			break;
			//all forms
		    case 4:
			//calls upon random int from before and randomizes the type of question
			switch (random)
			{
				//see previous
			    case 0:
				g.drawString (one + " + " + two, 310, 150);
				ans = (one + two);
				break;
				//see previous
			    case 1:
				if (two > one)
				{
				    placeholder = two;
				    two = one;
				    one = placeholder;
				}
				g.drawString (one + " - " + two, 310, 150);
				ans = (one - two);
				break;
				//see previous
			    case 2:
				g.drawString (one + " x " + two, 310, 150);
				ans = (one * two);
				break;
				//see previous
			    case 3:
				if (one == 0)
				{
				    one = 1;
				}
				if (two == 0)
				{
				    two = 1;
				}
				placeholder = (one * two);
				g.drawString (placeholder + " / " + one, 310, 150);
				ans = two;
				break;
			}
			break;
		}

		//again, if timer is off (first second), this method runs
		if (timerStarted == false)
		{
		    int counter = 0;
		    do
		    {
			//generates the other two answers
			ans1 = randomGenerator.nextInt (10);
			ans2 = randomGenerator.nextInt (10);
			counter = 1;

			if (random == 2 || math == 2)
			{
			    ans1 = ans + ans1;
			    ans2 = ans + ans2;
			}
			
			//ensures that no two buttons have the same answer
			if (ans1 == ans2 || ans1 == ans || ans2 == ans)
			{
			    counter = 0;
			}
		    }
		    while (counter == 0);


		    //generates the button in which the correct answer is placed
		    buttNumber = randomGenerator.nextInt (3);

		    //sets the answers into the buttons
		    setButtonLabel ();

		    //randomizes a motivational comment
		    comment = randomGenerator.nextInt (3);

		    //after all this is complete, these variables do not change until the next question, therefore, the timer has started
		    timerStarted = true;
		}

		//sets colour for motivational messages
		g.setColor (Color.black);
		g.setFont (jokes);
		//randomizes messages
		switch (comment)
		{
		    case 0:
			g.drawString ("GO! GO! GO!", 725, 100);
			break;
		    case 1:
			g.drawString ("YOU KNOW THE ANSWER!", 610, 100);
			break;
		    case 2:
			g.drawString ("DON'T GIVE UP!", 700, 100);
			break;
		}

		//sets the boundaries for the buttons
		butt1.setBounds (300, 200, 400, 75);
		butt2.setBounds (300, 300, 400, 75);
		butt3.setBounds (300, 400, 400, 75);

		//displays the score and the time remaining
		g.setFont (text);
		g.drawString ("Score: " + score, 50, 600);
		g.drawString ("Time: ", 750, 600);
		g.drawString (" " + seconds + " ", 840, 600);
		break;

		//GAME OVER
	    case 4:
		//sets background
		g.drawImage (GOScreen, 0, 0, x, y, this);
		setBackground (Color.black);

		//sets button and boundaries to display
		home.setVisible (true);
		home.setBounds (300, 360, 400, 75);

		//sets font and colour to display message
		g.setColor (Color.white);
		g.setFont (text);
		g.drawString ("Game Over.", 300, 260);
		g.drawString ("Final Score: " + score, 300, 310);

		Integer wrongNumber;
		if (wrong == 1)
		{
		    wrongNumber = Integer.valueOf (butt1.getLabel ());
		}

		else if (wrong == 2)
		{
		    wrongNumber = Integer.valueOf (butt2.getLabel ());
		}

		else
		{
		    wrongNumber = Integer.valueOf (butt3.getLabel ());
		}

		//display wrong selection
		g.setColor (Color.red);
		g.setFont (wrongFont);

		if (wrong == 4)
		{
		    g.drawString ("FASTER! FASTERR!! FASTERRR!!!", 300, 150);
		}

		else
		{
		    switch (math)
		    {
			    //only addition
			case 0:
			    g.drawString ("*SIGH*   " + one + " + " + two + "  ISN'T  " + wrongNumber + "!!", 260, 150);
			    break;
			    //only subtraction
			case 1:
			    g.drawString ("WHAT?!   " + one + " - " + two + "  ISN'T  " + wrongNumber + "!!", 260, 150);
			    break;
			    //only multiplication
			case 2:
			    g.drawString ("OOPS!!   " + one + " x " + two + "  ISN'T  " + wrongNumber + "!!", 265, 150);
			    break;
			    //only division
			case 3:
			    g.drawString ("NOOO!!!   " + placeholder + " / " + one + "  ISN'T  " + wrongNumber + "!!", 250, 150);
			    break;
			    //all forms
			case 4:
			    //calls upon random int from before and randomizes the type of question
			    switch (random)
			    {
				    //see previous
				case 0:
				    g.drawString ("*SIGH*   " + one + " + " + two + "  ISN'T  " + wrongNumber + "!!", 260, 150);
				    break;
				    //see previous
				case 1:
				    g.drawString ("WHAT?!   " + one + " - " + two + "  ISN'T  " + wrongNumber + "!!", 260, 150);
				    break;
				    //see previous
				case 2:
				    g.drawString ("OOPS!!   " + one + " x " + two + "  ISN'T  " + wrongNumber + "!!", 265, 150);
				    break;
				    //see previous
				case 3:
				    g.drawString ("NOOO!!!   " + placeholder + " / " + one + "  ISN'T  " + wrongNumber + "!!", 250, 150);
				    break;
			    }
			    break;
		    }
		}

		//sets font and colour to display a joke to cheer them up
		g.setFont (jokes);
		g.setColor (Color.magenta);

		int randomJoke = randomGenerator.nextInt (3);

		//displays different jokes
		switch (randomJoke)
		{
		    case 0:
			g.drawString ("What is the difference between arguing with a girl and a decimal?", 100, 550);
			g.drawString ("The decimal always has a point.", 100, 600);
			break;
		    case 1:
			g.drawString ("Math is like love...", 100, 550);
			g.drawString ("...a simple idea, but it can get complicated real fast", 300, 600);
			break;
		    case 2:
			g.drawString ("Why did Randy eat his math homework?", 100, 550);
			g.drawString ("Because the teacher told him it was a piece of cake.", 100, 600);
			break;
		}
		break;

		//SETTINGS
	    case 5:
		//sets background
		g.drawImage (SettingsScreen, 0, 0, x, y, this);

		//sets buttons, radio buttons, and text fields and their boundaries so that they are visible
		addition.setVisible (true);
		subtract.setVisible (true);
		multiply.setVisible (true);
		divide.setVisible (true);
		all.setVisible (true);
		back.setVisible (true);
		userTime.setVisible (true);
		on.setVisible (true);
		off.setVisible (true);
		back.setBounds (375, 500, 200, 75);
		addition.setBounds (100, 175, 100, 50);
		subtract.setBounds (210, 175, 140, 50);
		multiply.setBounds (360, 175, 150, 50);
		divide.setBounds (525, 175, 90, 50);
		all.setBounds (630, 175, 50, 50);
		userTime.setBounds (100, 295, 50, 20);
		on.setBounds (225, 340, 50, 50);
		off.setBounds (290, 340, 50, 50);

		//output text
		g.setFont (text);
		g.setColor (Color.white);
		g.drawString ("SETTINGS: ", 100, 100);
		g.setFont (text2);
		g.drawString ("Select one of the following: ", 100, 165);
		g.drawString ("Enter the time (seconds) per question [min 1, max 10]: ", 100, 275);
		g.drawString ("Sound: ", 100, 375);
		break;
	}
    } // paint method


    //ACTION LISTENER METHOD
    public void actionPerformed (ActionEvent evt)
    {
	//if start button is pressed...
	if (evt.getSource () == start)
	{
	    //...next page
	    page = 1;
	}

	//if the next button is pressed...
	if (evt.getSource () == next)
	{
	    //...next page
	    page = 2;
	}

	//if the go button is pressed...
	if (evt.getSource () == go)
	{
	    //...next page...
	    page = 3;
	    //...AND the timer starts
	    time.start ();
	}

	//if user selects button 1 as the answer...
	if (evt.getSource () == butt1)
	{
	    //...check to see if they are right...and if they are...
	    if (buttNumber == 0)
	    {
		//...go back to the game page (loop) and give them a different question...
		page = 3;
		//...add one to their score...
		score++;
		//...restart the timer...
		time.restart ();
		//...change the boolean back to false
		timerStarted = false;
	    }

	    else
	    {
		//give the the game over page of shame
		page = 4;
		//stop the timer
		time.stop ();
		//reset the boolean
		timerStarted = false;
		//wrong
		wrong = 1;
	    }
	    //reset the amount of seconds on the clock
	    seconds = userSeconds;
	}

	//same as button 1
	if (evt.getSource () == butt2)
	{
	    if (buttNumber == 1)
	    {
		page = 3;
		score++;
		time.restart ();
		timerStarted = false;
	    }

	    else
	    {
		page = 4;
		time.stop ();
		timerStarted = false;
		wrong = 2;
	    }
	    seconds = userSeconds;
	}

	//see button 1 or button 2, which tells you to see button 1, so just go see button 1
	if (evt.getSource () == butt3)
	{
	    if (buttNumber == 2)
	    {
		page = 3;
		score++;
		time.restart ();
		timerStarted = false;
	    }

	    else
	    {
		page = 4;
		time.stop ();
		timerStarted = false;
		wrong = 3;
	    }
	    seconds = userSeconds;
	}

	//if home button is pressed...
	if (evt.getSource () == home)
	{
	    //...go to the home screen (duh)
	    page = 0;
	}

	//if the settings button is selected...
	if (evt.getSource () == settings)
	{
	    //...kindly go to the settings page
	    page = 5;
	}

	//if the exit button is pressed to exit the settings page...
	if (evt.getSource () == back)
	{
	    //...go to the home page...
	    page = 0;

	    //...check to see which option the user selected and set the variable for the appropriate option
	    if (addition.getState () == true)
	    {
		math = 0;
	    }
	    else if (subtract.getState () == true)
	    {
		math = 1;
	    }
	    else if (multiply.getState () == true)
	    {
		math = 2;
	    }

	    else if (divide.getState () == true)
	    {
		math = 3;
	    }
	    else if (all.getState () == true)
	    {
		math = 4;
	    }

	    //ensure that the user is not sneaky and trying to ruin your program
	    try
	    {
		userSeconds = Integer.parseInt (userTime.getText ());
	    }
	    catch (Throwable t)
	    {
		//manually set userSeconds to 11 so that the message later is displayed only once
		userSeconds = 11;
		//stay on the settings page
		page = 5;
	    }

	    //for people who like big numbers or negative numbers, as well as the String people are redirected here
	    if (userSeconds <= 0 || userSeconds > 10)
	    {
		//output dialog saying they had one job
		JOptionPane.showMessageDialog (null, "Please enter an integer from 1 to 10", "Follow instructions!", 0);
		//stay on the settings page
		page = 5;
	    }

	    //if the user is not sneaky...
	    else
	    {
		//...the user input is now equal to the amount of seconds for the game
		seconds = userSeconds;
	    }

	    //if the user doesn't want music...
	    if (off.getState () == true && audioOn == true)
	    {
		//...then stop the music
		audio.stop ();
		audioOn = false;
	    }

	    //if the user wants music...
	    else if (on.getState () == true && audioOn == false)
	    {
		//...then play the music
		audio.loop ();
		audioOn = true;
	    }
	}

	//if the timer has been started...
	if (timerStarted == true)
	{
	    //...subtract seconds every second
	    seconds--;

	    //if there is no time left...
	    if (seconds <= 0)
	    {
		//...the game is over...
		page = 4;
		//...stop the timer...
		time.stop ();
		//...the timer has now been stopped...
		timerStarted = false;
		//...reset the clock
		seconds = userSeconds;
		wrong = 4;
	    }
	}
	//calls on the method to reset the buttons after every time a button is pressed
	resetButtons ();

	//repaint
	repaint ();
    } // Summative class - Hope you enjoyed it!
}


